
npx inngest-cli@latest dev
npx drizzle-kit push
 npx drizzle-kit studio

 //Generate a study material for <> for exam and level of difficulty will be easy with summary of course, list of 
 Chapters along with summary for each chapter ,topic list in each chapter , all results in JSON format

 Generate a study material package for <SUBJECT> tailored for exam preparation. The difficulty level should be easy.

The output should include:

    A summary of the entire course.

    A list of chapters, each with:

        A brief summary of the chapter

        A list of topics covered within the chapter

    All information should be structured in JSON format.

    genarate the flashcards on topic :[] in json format with front back content maximun 15
    `Generate flashcards on the topics: [${chapters.join(", ")}]. Each flashcard should include:
- 'front': a concise question, term, or concept
- 'back': a clear, informative answer or explanation
Generate a maximum of 15 flashcards. Output the result as a JSON array with objects containing 'front' and 'back' fields only.`
import { db } from "@/configs/db";
import { STUDY_TYPE_CONTENT_TABLE } from "@/configs/schema";
import { inngest } from "@/inngest/client";
import { NextResponse } from "next/server";

    
     
            

export async function POST(req) {
  const { chapters,courseId,type } = await req.json();
  const PROMPT = `Generate flashcards on the topics: [${chapters.join(", ")}]. Each flashcard should include:
- 'front': a concise question, term, or concept
- 'back': a clear, informative answer or explanation
Generate a maximum of 15 flashcards. Output the result as a JSON array with objects containing 'front' and 'back' fields only.`
 

 const result = await db.insert(STUDY_TYPE_CONTENT_TABLE).values({
    courseId: courseId,
    type: type,
    content: PROMPT
  }).returning({id: STUDY_TYPE_CONTENT_TABLE.id});
//trigger ingest
  await inngest.send({
    name: "study-type.generate",
    data: {
      courseId: courseId,
      type: type,
      prompt: PROMPT,
      recordId: result[0].id
    }
  });

  return NextResponse.json({
    success: true,
    message: "Flashcards generated successfully",
    data: result
  });
}


export const GenerateStudyTypeContent = inngest.createFunction(
 { id: "generate-study-type-content" },
  { event: "study-type.generate" },
  async ({ event, step }) => {
    const { studyType ,prompt,courseId ,recordId} = event.data;
    const FlashcardAiResult = await step.run("Generate Flashcard AI", async () => {
      const result = await generateFlashcardAi(prompt);
      const AIResult =JSON.parse(result.response.text());
      return AIResult;
    }); 
    const DbResult=await step.run("Insert into DB", async () => {
      const result = await db.insert(STUDY_TYPE_CONTENT_TABLE).set({
       
        content: FlashcardAiResult,
      }).where(eq(STUDY_TYPE_CONTENT_TABLE.courseId,courseId,recordId))
      
      return 'data inserted' ;
    });
  
  })

  
export const GenerateStudyTypeContentAiModel = model.startChat({
  generationConfig: {
    responseMimeType: "application/json"
  },
  history: [
    {
      role: "user",
      parts: [{
        text: `Generate flashcards on the topics: [\${chapterTitles.join(", ")}]. Each flashcard should include:
- 'front': a concise question, term, or concept
- 'back': a clear, informative answer or explanation
Generate a maximum of 15 flashcards. Output the result as a JSON array with objects containing 'front' and 'back' fields only.`
      }]
    }
  ]
});
